--1. Atualizar débitos vencidos e não 'Negociado' nem 'Pago' para 'Atrasado'
UPDATE DEBITOS
SET SITUACAO_DEBITO = 'Atrasado'
WHERE DATAVENCIMENTO < CURRENT_DATE
AND SITUACAO_DEBITO NOT IN ('Negociado', 'Pago')

--2. Atualizar débitos não vencidos e não 'Pago' para 'Pendente'
UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'Pendente'
WHERE DATAVENCIMENTO >= CURRENT_DATE
AND SITUACAO_DEBITO != 'Pago'

--3. Atualizar data de vencimento de débitos 'Negociado' para 5 anos atrás
UPDATE DEBITOS
SET DATAVENCIMENTO = DATEADD(-5 YEAR TO DATAVENCIMENTO)
WHERE SITUACAO_DEBITO = 'negociado'

--4. Selecionar nome, email e telefone de todas as pessoas
SELECT NOME, EMAIL, TELEFONE 
FROM PESSOA

--5. Listar produtos com preço unitário acima de $100
SELECT PRECO_UNITARIO 
FROM PRODUTO
WHERE PRECO_UNITARIO > 100

--6. Retornar todas as vendas realizadas em uma determinada data
SELECT *
FROM VENDA
WHERE DATA_VENDA = '2001-02-15';

--7. Mostrar nome, data de nascimento e idade de fornecedores sem produtos em estoque
SELECT 
    P.NOME,
    P.DATA_NASCIMENTO,
    (CURRENT_DATE - P.DATA_NASCIMENTO) / 365
FROM FORNECEDOR F
INNER JOIN PESSOA P ON F.ID_PESSOA = P.ID_PESSOA
LEFT JOIN PRODUTO PR ON F.ID_FORNECEDOR = PR.ID_FORNECEDOR
WHERE PR.ID_PRODUTO IS NULL OR PR.QUANTIDADE_ESTOQUE = 0;

--8. Liste os clientes que já realizaram compras com débitos vencidos.
SELECT 
    C.ID_CLIENTE,
    P.NOME,
    D.DATAVENCIMENTO,
    D.SITUACAO_DEBITO
FROM CLIENTE C
INNER JOIN PESSOA P ON C.ID_PESSOA = P.ID_PESSOA
INNER JOIN DEBITOS D ON C.ID_CLIENTE = D.ID_CLIENTE
WHERE D.DATAVENCIMENTO < CURRENT_DATE
AND D.SITUACAO_DEBITO <> 'PAGO';

--9. lais errou

--10. Selecione os 10 maiores devedores trazendo código, nome, idade e a soma total dos débitos vencidos e a soma total dos débitos pagos.
SELECT d.ID_CLIENTE,
       p.NOME,
       (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE,
       (SELECT SUM(d2.VALOR_TOTAL)
    FROM DEBITOS d2
    WHERE d2.ID_CLIENTE = d.ID_CLIENTE
    AND d2.DATAVENCIMENTO < CURRENT_DATE) AS DEBITO_VENCIDO,
   COALESCE ((SELECT SUM(d3.VALOR_TOTAL)
    FROM DEBITOS d3
    WHERE d3.ID_CLIENTE = d.ID_CLIENTE
    AND d3.SITUACAO_DEBITO = 'Pago'), 0) AS DEBITO_PAGO
FROM DEBITOS d
LEFT JOIN CLIENTE c ON c.ID_CLIENTE = d.ID_CLIENTE
LEFT JOIN PESSOA p ON p.ID_PESSOA = c.ID_PESSOA
GROUP BY d.ID_CLIENTE, p.NOME, IDADE
ORDER BY DEBITO_VENCIDO DESC
ROWS 10;

--11. Atualize o preço unitário de todos os produtos com estoque inferior a 10 unidades para mais 10%.
UPDATE PRODUTO
SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10
WHERE QUANTIDADE_ESTOQUE > 10;
 
--12.

--13. Altere todos os débitos que estão com situação = 'Atrasado' para 'Pagos' se o mesmo ter o registro na tabela de pagamento.
UPDATE DEBITOS
SET SITUACAO_DEBITO = 'Pagos'
WHERE SITUACAO_DEBITO = 'Atrasado'
AND ID_DEBITO IN (SELECT ID_DEBITO FROM PAGAMENTO);

--15. Selecione as vendas entre o mês de dezembro de 2023 até janeiro de 2024.
SELECT *
FROM VENDA
WHERE DATA_VENDA BETWEEN '2023-12-01' AND '2024-01-31';

--16. Liste os produtos com estoque entre 5 e 20 unidades.
SELECT *
FROM PRODUTO p
WHERE p.QUANTIDADE_ESTOQUE BETWEEN 5 AND 20;

--17. Retorne todas as pessoas com nomes que começam com 'A'.
SELECT *
FROM PESSOA p
WHERE p.NOME LIKE 'A%';

--18. Selecione os produtos que não foram vendidos.
SELECT *
FROM PRODUTO
WHERE ID_PRODUTO NOT IN (SELECT ID_PRODUTO FROM ITENSVENDA);

--19. Liste os produtos vendidos para os clientes 'Carla Souza', 'Larissa Ferreira'.
SELECT 
    p.NOME,
    prod.NOME,
    iv.QUANTIDADE,
    iv.VALOR_UNITARIO
FROM CLIENTE c
JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
JOIN VENDA v ON v.ID_PESSOA = c.ID_PESSOA
JOIN ITENSVENDA iv ON iv.ID_VENDA = v.ID_VENDA
JOIN PRODUTO prod ON iv.ID_PRODUTO = prod.ID_PRODUTO
WHERE p.NOME IN ('Carla Souza', 'Larissa Ferreira');

--20. Mostre as pessoas que são clientes OU fornecedores.
SELECT DISTINCT p.ID_PESSOA, p.NOME, p.EMAIL, p.TELEFONE
FROM PESSOA p
LEFT JOIN CLIENTE c ON p.ID_PESSOA = c.ID_PESSOA
LEFT JOIN FORNECEDOR f ON p.ID_PESSOA = f.ID_PESSOA
WHERE c.ID_CLIENTE IS NOT NULL OR f.ID_FORNECEDOR IS NOT NULL;

--21. Retorne todas as informações da venda com detalhes do cliente e forma de pagamento.
SELECT *
FROM VENDA v
JOIN CLIENTE c ON v.ID_PESSOA = c.ID_PESSOA
JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
JOIN FORMA_PAGAMENTO fp ON v.ID_FORMA_PAGAMENTO = fp.ID_FORMA_PAGAMENTO;

--22. Mostre todas as compras de um determinado produto ('Placa de Captura'), incluindo detalhes do produto.
SELECT *
FROM ITENSVENDA i
JOIN VENDA v ON i.ID_VENDA = v.ID_VENDA
JOIN PRODUTO p ON i.ID_PRODUTO = p.ID_PRODUTO
WHERE p.NOME = 'Placa de Captura';

--23. Combine os nomes dos fornecedores com os nomes dos clientes e suas respectivas idades que irão fazer no ano de 2025.
SELECT CAST('Cliente' AS varchar(10)) AS tipo, p.NOME, p.ID_PESSOA, (2025 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO))
    FROM PESSOA p
    INNER JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA
    UNION
   SELECT CAST('Fornecedor' AS varchar(10)) AS tipo, p2.NOME, p2.ID_PESSOA, (2025 - EXTRACT(YEAR FROM p2.DATA_NASCIMENTO))
    FROM FORNECEDOR f
    INNER JOIN PESSOA p2 ON p2.ID_PESSOA = f.ID_PESSOA


--24. Retorne todos os logradouros e bairros, indicando se pertencem ou não a uma pessoa.
SELECT b.CEP, b.ID_MUNICIPIO, l.NOME, p.NOME
FROM ENDERECO e
LEFT JOIN BAIRRO b ON b.ID_BAIRRO = e.ID_BAIRRO
LEFT JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO
LEFT JOIN PESSOA p ON p.ID_PESSOA = e.ID_PESSOA;

--25. Selecione os produtos que têm preço unitário superior à média.
SELECT
    NOME,
    PRECO_UNITARIO
FROM PRODUTO
WHERE PRECO_UNITARIO > (SELECT AVG(PRECO_UNITARIO) FROM PRODUTO);

--26. Liste os clientes que fizeram compras em cidades com mais de 1 milhão de habitantes.
SELECT DISTINCT p.ID_PESSOA, p.NOME
FROM PESSOA p
JOIN VENDA v ON p.ID_PESSOA = v.ID_PESSOA
JOIN ENDERECO e ON p.ID_PESSOA = e.ID_PESSOA
JOIN LOGRADOURO l ON e.ID_LOGRADOURO = l.ID_LOGRADOURO
JOIN BAIRRO b ON l.ID_BAIRRO = b.ID_BAIRRO
JOIN MUNICIPIO m ON b.ID_MUNICIPIO = m.ID_MUNICIPIO
WHERE m.POPULACAO > 1000000;

--27. Mostre a quantidade total de produtos vendidos por fornecedor.
SELECT 
    p.NOME AS NOME_FORNECEDOR,
    SUM(iv.QUANTIDADE) AS TOTAL_PRODUTOS_VENDIDOS
FROM FORNECEDOR f
JOIN PESSOA p ON f.ID_PESSOA = p.ID_PESSOA
JOIN PRODUTO prod ON f.ID_FORNECEDOR = prod.ID_FORNECEDOR
JOIN ITENSVENDA iv ON prod.ID_PRODUTO = iv.ID_PRODUTO
GROUP BY p.NOME
ORDER BY TOTAL_PRODUTOS_VENDIDOS DESC;

--28. Liste os clientes que realizaram compras com valor total superior a R$ 500.
SELECT
    c.ID_CLIENTE,
    p.NOME AS NOME_CLIENTE,
    v.VALOR_TOTAL
FROM CLIENTE c
JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA
JOIN VENDA v ON c.ID_CLIENTE = v.ID_PESSOA
WHERE v.VALOR_TOTAL > 500
ORDER BY v.VALOR_TOTAL DESC;

--29. Retorne todas as pessoas com seus endereços de correspondência e residência, se tiverem.
SELECT
    p.NOME,
    ec.NUMERO AS NUM_CORRESP,
    er.NUMERO AS NUM_RESID
FROM PESSOA p
LEFT JOIN ENDERECO ec ON p.ID_PESSOA = ec.ID_PESSOA AND ec.TIPO_ENDERECO = 'C'
LEFT JOIN ENDERECO er ON p.ID_PESSOA = er.ID_PESSOA AND er.TIPO_ENDERECO = 'R'
ORDER BY p.NOME;

--30. Liste os produtos e seus preços, juntamente com o nome do fornecedor, mesmo que não tenham fornecedor.
SELECT
    p.NOME AS NOME_PRODUTO,
    p.PRECO_UNITARIO,
    ps.NOME AS NOME_FORNECEDOR
FROM PRODUTO p
LEFT JOIN FORNECEDOR f ON p.ID_FORNECEDOR = f.ID_FORNECEDOR
LEFT JOIN PESSOA ps ON f.ID_PESSOA = ps.ID_PESSOA
ORDER BY p.NOME;
   
--31. Liste os produtos em ordem decrescente de quantidade em estoque.
SELECT
    NOME AS NOME_PRODUTO,
    QUANTIDADE_ESTOQUE
FROM PRODUTO
ORDER BY QUANTIDADE_ESTOQUE DESC;

--32. Retorne as vendas em ordem crescente de valor total.
SELECT *
FROM VENDA
ORDER BY VALOR_TOTAL ASC;

--33. Liste os produtos com quantidade em estoque menor que a média de todos os produtos.
SELECT *
FROM PRODUTO
WHERE QUANTIDADE_ESTOQUE < (
        SELECT AVG(QUANTIDADE_ESTOQUE) 
        FROM PRODUTO
    );

--34. Selecione todas as pessoas cujo número de telefone seja igual ao de outra pessoa.
SELECT p.NOME, p.TELEFONE
    FROM PESSOA p
    WHERE p.TELEFONE IN ( SELECT p2.TELEFONE FROM PESSOA p2 WHERE p.ID_PESSOA != p2.ID_PESSOA )
   
--35. Aumente em 10% o preço unitário de todos os produtos fornecidos por fornecedores de São Paulo.
UPDATE PRODUTO p
SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
WHERE p.ID_FORNECEDOR IN (
        SELECT f.ID_FORNECEDOR
        FROM FORNECEDOR f
        JOIN PESSOA pe ON f.ID_PESSOA = pe.ID_PESSOA
        JOIN ENDERECO e ON pe.ID_PESSOA = e.ID_PESSOA
        JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
        WHERE m.UF = 'SP'
    );
   
--36. Lista todas as vendas que estão com débito 'Negociado'.
SELECT *
FROM  VENDA v
JOIN  DEBITOS d ON v.ID_VENDA = d.ID_VENDA
WHERE d.SITUACAO_DEBITO = 'Negociado';
